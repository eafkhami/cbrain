
<%-
#
# CBRAIN Project
#
# Copyright (C) 2008-2012
# The Royal Institution for the Advancement of Learning
# McGill University
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
-%>

<% title("Files") %>

<!-- **************************************************************************** -->
<!-- CELL #1 : The two menu button lines, the pagination, and the userfiles table -->
<!-- **************************************************************************** -->

<% content_for :scripts do %>
  <%= javascript_tag (render :partial => "launch_task.js.erb",    :formats => [:js]).to_s %>
  <%= javascript_tag (render :partial => "file_selection.js.erb", :formats => [:js]).to_s %>
<% end %>

<div id="userfiles_menus_and_filelist">

  <%= multi_form_tag(:method => :post, "data-type"  => "script") do %>

      <div class="index_block">
        <%= render :partial => "userfiles/file_menu" %>

        <div id="userfiles_display">
          <%= render :partial => 'userfiles_display' %>
        </div>

        <%  sync_statuses = [ "InSync", "ProvNewer", "CacheNewer", "Corrupted", "ToCache", "ToProvider" ] %>
        <%= center_legend("Synchronization symbols:", sync_statuses.map { |s| [ status_html_symbol(s), s ] } ) %>
      </div>
  <% end %> <!-- form -->
</div> <!-- cell #1 -->

  <nav id="context-menu" class="context-menu">
    <ul class="context-menu__items">
      <li class="context-menu__item">
        <a href="/tags/new" class="context-menu__link" data-action="View" data-target="__OVERLAY__" data-remote="true"><i class="fa fa-eye"></i> Move</a>
      </li>
      <li class="context-menu__item">
		  <a class=" ajax_link" data-type="html" data-target="__OVERLAY__" data-remote="true" href="/tags/new">

		      Create Tag

		  </a>
      </li>
      <li class="context-menu__item">
        <a href="#" class="context-menu__link" data-action="Delete"><i class="fa fa-times"></i> Delete</a>
      </li>
    </ul>
  </nav>



   <script type="text/javascript">



 $(document).ready(function() {


 });

 (function() {

   "use strict";

   //////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////
   //
   // H E L P E R    F U N C T I O N S
   //
   //////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////

   /**
    * Function to check if we clicked inside an element with a particular class
    * name.
    *
    * @param {Object} e The event
    * @param {String} className The class name to check against
    * @return {Boolean}
    */
   function clickInsideElement( e, className ) {
     var el = e.srcElement || e.target;

     if ( el.classList.contains(className) ) {
       return el;
     } else {
       while ( el = el.parentNode ) {
         if ( el.classList && el.classList.contains(className) ) {
           return el;
         }
       }
     }

     return false;
   }

   /**
    * Get's exact position of event.
    *
    * @param {Object} e The event passed in
    * @return {Object} Returns the x and y position
    */
   function getPosition(e) {
     var posx = 0;
     var posy = 0;

     if (!e) var e = window.event;

     if (e.pageX || e.pageY) {
       posx = e.pageX;
       posy = e.pageY;
     } else if (e.clientX || e.clientY) {
       posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
       posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
     }

     return {
       x: posx,
       y: posy
     }
   }

   //////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////
   //
   // C O R E    F U N C T I O N S
   //
   //////////////////////////////////////////////////////////////////////////////
   //////////////////////////////////////////////////////////////////////////////

   /**
    * Variables.
    */
   var contextMenuClassName = "context-menu";
   var contextMenuItemClassName = "context-menu__item";
   var contextMenuLinkClassName = "context-menu__link";
   var contextMenuActive = "context-menu--active";

   var taskItemClassName = "dt-sel-row";
   var taskItemInContext;

   var clickCoords;
   var clickCoordsX;
   var clickCoordsY;

   var menu = document.querySelector("#context-menu");
   var menuItems = menu.querySelectorAll(".context-menu__item");
   var menuState = 0;
   var menuWidth;
   var menuHeight;
   var menuPosition;
   var menuPositionX;
   var menuPositionY;

   var windowWidth;
   var windowHeight;

   /**
    * Initialise our application's code.
    */
   function init() {
     contextListener();
     clickListener();
     keyupListener();
     resizeListener();
   }

   /**
    * Listens for contextmenu events.
    */
   function contextListener() {
     document.addEventListener( "contextmenu", function(e) {
       taskItemInContext = clickInsideElement( e, taskItemClassName );

       if ( taskItemInContext ) {
         e.preventDefault();
         toggleMenuOn();
         positionMenu(e);
       } else {
         taskItemInContext = null;
         toggleMenuOff();
       }
     });
   }

   /**
    * Listens for click events.
    */
   function clickListener() {
     document.addEventListener( "click", function(e) {
       var clickeElIsLink = clickInsideElement( e, contextMenuLinkClassName );

       if ( clickeElIsLink ) {
         e.preventDefault();
         menuItemListener( clickeElIsLink );
       } else {
         var button = e.which || e.button;
         if ( button === 1 ) {
           toggleMenuOff();
         }
       }
     });
   }

   /**
    * Listens for keyup events.
    */
   function keyupListener() {
     window.onkeyup = function(e) {
       if ( e.keyCode === 27 ) {
         toggleMenuOff();
       }
     }
   }

   /**
    * Window resize event listener
    */
   function resizeListener() {
     window.onresize = function(e) {
       toggleMenuOff();
     };
   }

   /**
    * Turns the custom context menu on.
    */
   function toggleMenuOn() {
     if ( menuState !== 1 ) {
       menuState = 1;
       menu.classList.add( contextMenuActive );
     }
   }

   /**
    * Turns the custom context menu off.
    */
   function toggleMenuOff() {
     if ( menuState !== 0 ) {
       menuState = 0;
       menu.classList.remove( contextMenuActive );
     }
   }

   /**
    * Positions the menu properly.
    *
    * @param {Object} e The event
    */
   function positionMenu(e) {
     clickCoords = getPosition(e);
     clickCoordsX = clickCoords.x;
     clickCoordsY = clickCoords.y;

     menuWidth = menu.offsetWidth + 4;
     menuHeight = menu.offsetHeight + 4;

     windowWidth = window.innerWidth;
     windowHeight = window.innerHeight;

     if ( (windowWidth - clickCoordsX) < menuWidth ) {
       menu.style.left = windowWidth - menuWidth + "px";
     } else {
       menu.style.left = clickCoordsX + "px";
     }

     if ( (windowHeight - clickCoordsY) < menuHeight ) {
       menu.style.top = windowHeight - menuHeight + "px";
     } else {
       menu.style.top = clickCoordsY + "px";
     }
   }

   /**
    * Dummy action function that logs an action when a menu item link is clicked
    *
    * @param {HTMLElement} link The link that was clicked
    */
   function menuItemListener( link ) {
     //alert( "Task ID - " + taskItemInContext.getAttribute("data-id") + ", Task action - " + link.getAttribute("data-action"));
     toggleMenuOff();
   }

   /**
    * Run the app.
    */
   init();

 })();



   </script>

 <style type="text/css">

 *,
 *::before,
 *::after {
   box-sizing: border-box;
 }


 .container {
   margin: 0 auto;
   padding: 0 24px;
   max-width: 960px;
 }

 /* primary header */

 .primary-header {
   padding: 24px 0;
   text-align: center;
   border-bottom: solid 2px #cfcfcf;
 }

 .primary-header__title {
   color: #393939;
   font-size: 36px;
 }

 .primary-header__title small {
   font-size: 18px;
   color: #898989;
 }

 /* content */

 .content {
   padding: 48px 0;
   border-bottom: solid 2px #cfcfcf;
 }

 .content__footer {
   margin-top: 12px;
   text-align: center;
 }

 /* footer */

 .primary-footer {
   padding: 24px 0;
   color: #898989;
   font-size: 14px;
   text-align: center;
 }

 /* tasks */

 .tasks {
   list-style: none;
   margin: 0;
   padding: 0;
 }

 .task {
   display: flex;
   justify-content: space-between;
   padding: 12px 0;
   border-bottom: solid 1px #dfdfdf;
 }

 .task:last-child {
   border-bottom: none;
 }

 /* context menu */

 .context-menu {
   display: none;
   position: absolute;
   z-index: 10;
   padding: 12px 0;
   width: 240px;
   background-color: #fff;
   border: solid 1px #dfdfdf;
   box-shadow: 1px 1px 2px #cfcfcf;
 }

 .context-menu--active {
   display: block;
 }

 .context-menu__items {
   list-style: none;
   margin: 0;
   padding: 0;
 }

 .context-menu__item {
   display: block;
   margin-bottom: 4px;
 }

 .context-menu__item:last-child {
   margin-bottom: 0;
 }

 .context-menu__link {
   display: block;
   padding: 4px 12px;
   color: #0066aa;
   text-decoration: none;
 }

 .context-menu__link:hover {
   color: #fff;
   background-color: #0066aa;
 }

 </style>

